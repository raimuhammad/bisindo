input CreateUserInput {
  name: String! @rules(apply: ["required"])
  email: String! @rules(apply: ["required", "unique:users,email"])
  grade_id: String! @rules(apply: ["required", "exists:grades,id"])
}

extend type Query {
  students(
    search: String @builder(method: "App\\GraphQL\\StudentGradeResolver@search")
    grade_id: String @where(key: "grades.id")
  ): [StudentGrade]
    @builder(method: "App\\GraphQL\\StudentGradeResolver@builder")
    @paginate
  isUniqueEmail(email: String!): Boolean
    @field(resolver: "App\\GraphQL\\UserResolver@isUniqEmail")
  userByGrade(grade_id: ID!): [User!]!
    @field(resolver: "App\\GraphQL\\UserResolver@getUserByGrade")
  videoByGrade(
    grade_id: ID! @builder(method: "App\\GraphQL\\VideoResolver@getByGrade")
  ): [Video!]! @all
  quizByGrade(
    grade_id: ID! @builder(method: "App\\GraphQL\\QuizResolver@getByGrade")
  ): [Quiz!]! @all
  progressByGrade(grade_id: ID!): [Progress!]!
    @field(resolver: "App\\GraphQL\\ProgressResolver@getByGrade")
}

extend type Mutation {
  user(args: CreateUserInput! @spread): User
    @field(resolver: "App\\GraphQL\\UserResolver@create")
  loginWithInvitation(
    invitation: String! @rules(apply: ["required", "exists:users,invitation"])
    password: String! @rules(apply: ["required"])
  ): Boolean @field(resolver: "App\\GraphQL\\UserResolver@loginWithInvitation")
  userChangeUserPassword(
    password: String!
      @rules(apply: ["required", "string", "min:8", "confirmed"])
    password_confirmation: String! @rules(apply: ["required"])
  ): Boolean
    @field(resolver: "App\\GraphQL\\UserResolver@changeDefaultPassword")
  sentInvitation(
    id: String! @rules(apply: ["required", "exists:users,id"])
  ): Boolean @field(resolver: "App\\GraphQL\\UserResolver@sendInvitation")
  userEdit(
    id: String! @eq
    name: String @rules(apply: ["sometimes"])
    email: String @rules(apply: ["unique:users,email"])
  ): User @update
  userActivation(
    id: String! @eq
    password: String! @rules(apply: ["required", "string", "min:6"])
  ): User @field(resolver: "App\\GraphQL\\UserResolver@activation")
  userDelete(id: String! @eq): User! @delete
}
