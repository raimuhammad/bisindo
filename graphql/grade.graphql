type Grade {
  id: ID!
  student_count: Int!
  video_count: Int!
  name: String!
  students: [StudentGrade!]!
  videos: [Video!]!
  created_at: Date!
  updated_at: Date
}

extend type Mutation {
  grade(name: String!): Grade @create
  gradeEdit(id: ID! @eq, name: String): Grade @update
}
extend type Query {
  grades(search: String @where(key: "name", operator: "like")): [Grade!]!
    @orderBy(column: "created_at", direction: DESC)
    @paginate
  gradeAll: [Grade!]! @orderBy(column: "name", direction: ASC) @all
  getStudentByGrade(grade_id: ID! @where): [StudentGrade!]!
    @orderBy(column: "created_at", direction: DESC)
    @paginate
  gradeById(id: ID! @eq): Grade @find
  gradeQuizes(grade_id: ID! @builder(method: "App\\GraphQL\\StudentGradeResolver@quiz")): [Quiz]
    @all
}
