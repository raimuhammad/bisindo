type Video {
  id: ID!
  created_at: Date!
  updated_at: Date
  title: String!
  caption: String!
  description: String!
  content: String!
  thumbnail: String!
  duration: Int!
  grades: [Grade!]! @method(name: "getGradesAttribute")
  quizes: [Quiz!]!
  student_progress: [Progress!]!
  quiz_count: Int!
}
extend type Query {
  video(id: ID! @eq): Video @find
  videos(
    grade_id: ID @builder(method: "App\\GraphQL\\VideoResolver@getByGrade")
    search: String @builder(method: "App\\GraphQL\\VideoResolver@search")
  ): [Video!]! @orderBy(column: "created_at", direction: DESC) @paginate
  getVideoByGrade(
    grade_id: ID! @builder(method: "App\\GraphQL\\VideoResolver@getByGrade")
  ): [Video!]! @orderBy(column: "created_at", direction: ASC) @all
  videoNotInGrade(
    id: ID!
    @builder(method: "App\\GraphQL\\VideoResolver@videoNotInGrade")
  ): [Video!]! @all
}
extend type Mutation {
  video(
    grade_id: String! @rules(apply: ["required", "exists:grades,id"])
    title: String! @rules(apply: ["required"])
    caption: String! @rules(apply: ["required"])
    description: String! @rules(apply: ["required"])
    content: Upload! @rules(apply: ["required", "mimetypes:video/*"])
  ): Video! @field(resolver: "App\\GraphQL\\VideoResolver@create")
  videoUpdate(
    id: ID! @eq
    title: String! @rules(apply: ["required"])
    caption: String! @rules(apply: ["required"])
    description: String! @rules(apply: ["required"])
  ): Video! @update
  videoDelete(id: ID! @eq): Video! @delete
}
