enum AppRole {
  ADMIN
  STUDENT
}

input CreateQuizAnswerInput {
  quiz_id: String!
  meta_data: QuizAnswerMetaInput!
}

input CreateQuizInput {
  video_id: String!
  show_at: Float!
  type: QuizType!
  meta_data: MetaDataInput
}

input CreateUserInput {
  name: String!
  email: String!
  grade_id: String!
}

input CreateVideoInput {
  grade_id: String!
  title: String!
  caption: String!
  description: JSON!
  content: Upload!
}

"""A date string with format `Y-m-d`, e.g. `2011-05-23`."""
scalar Date

"""
A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`.
"""
scalar DateTime

type Grade {
  id: ID!
  student_count: Int!
  video_count: Int!
  name: String!
  students: [StudentGrade!]!
  videos: [Video!]!
  created_at: Date!
  updated_at: Date
}

"""
Arbitrary data encoded in JavaScript Object Notation. See https://www.json.org/.
"""
scalar JSON

input MetaDataInput {
  letters: String
  word: String
  question: String
  options: [String!]
  question_answer: String
}

type Mutation {
  login(email: String!, password: String!): Boolean
  logout: Boolean
  video(args: CreateVideoInput!): Video
  videoUpdate(id: ID!, args: UpdateVideoInput!): Video
  videoDelete(id: ID!): Video
  quiz(args: CreateQuizInput!): Quiz
  quizDelete(id: ID!): Quiz!
  quizAnswer(args: CreateQuizAnswerInput!): QuizAnswer
  user(args: CreateUserInput!): User
  loginWithInvitation(invitation: String): Boolean
  userChangeUserPassword(password: String!, password_confirmation: String!): Boolean
  sentInvitation(id: String!): Boolean
  grade(name: String!): Grade
  gradeEdit(id: ID!, name: String): Grade
}

"""Allows ordering a list of records."""
input OrderByClause {
  """The column that is used for ordering."""
  column: String!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""Pagination information about the corresponding list of items."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Total number of node in connection."""
  total: Int

  """Count of nodes in current request."""
  count: Int

  """Current page of request."""
  currentPage: Int

  """Last page in connection."""
  lastPage: Int
}

"""Pagination information about the corresponding list of items."""
type PaginatorInfo {
  """Total count of available items in the page."""
  count: Int!

  """Current pagination page."""
  currentPage: Int!

  """Index of first item in the current page."""
  firstItem: Int

  """If collection has more pages."""
  hasMorePages: Boolean!

  """Index of last item in the current page."""
  lastItem: Int

  """Last page number of the collection."""
  lastPage: Int!

  """Number of items per page in the collection."""
  perPage: Int!

  """Total items available in the collection."""
  total: Int!
}

type Query {
  auth: User
  videos: [Video!]!
  quizzes: [Quiz]
  quizVideo(video_id: String!): [Quiz!]
  quizAnswers: [QuizAnswer!]!
  students: [User!]!
  grades: [Grade!]!
  gradeById(id: ID!): Grade
  getVideoByGrade(
    grade_id: ID!

    """Limits number of fetched elements."""
    first: Int!

    """The offset from which elements are returned."""
    page: Int
  ): VideoPaginator
  getStudentByGrade(
    grade_id: ID!

    """Limits number of fetched elements."""
    first: Int!

    """The offset from which elements are returned."""
    page: Int
  ): StudentGradePaginator
}

type Quiz {
  id: ID!
  created_at: Date!
  updated_at: Date
  video_id: String!
  show_at: Float!
  type: QuizType!
  letters: String
  word: String
  question: String
  options: [String!]
  question_answer: String
}

type QuizAnswer {
  id: ID!
  created_at: Date!
  updated_at: Date
  user_id: String!
  quiz_id: String!
  to: [String]
  from: [String]
  items: [String]
  selected: String
}

input QuizAnswerMetaInput {
  selected: String
  to: [String]
  from: [String]
  items: [String]
}

enum QuizType {
  IMAGE_MATCH
  LETTER_SEQUENCE
  MULTIPLE_CHOICE
}

"""The available directions for ordering a list of records."""
enum SortOrder {
  """Sort records in ascending order."""
  ASC

  """Sort records in descending order."""
  DESC
}

type StudentGrade {
  id: ID!
  created_at: Date!
  updated_at: Date
  student: User!
  grade: Grade!
}

"""A paginated list of StudentGrade items."""
type StudentGradePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of StudentGrade items."""
  data: [StudentGrade!]!
}

"""
Specify if you want to include or exclude trashed results from a query.
"""
enum Trashed {
  """Only return trashed results."""
  ONLY

  """Return both trashed and non-trashed results."""
  WITH

  """Only return non-trashed results."""
  WITHOUT
}

input UpdateVideoInput {
  title: String
  caption: String
  description: JSON
}

scalar Upload

type User {
  id: ID!
  name: String!
  email: String!
  created_at: Date!
  updated_at: Date
  role: AppRole!
  need_change_password: Boolean!
  active: Boolean
}

type Video {
  id: ID!
  created_at: Date!
  updated_at: Date
  title: String!
  caption: String!
  description: String!
  content: String!
  thumbnail: String!
  duration: Int!
  grade: Grade!
}

"""A paginated list of Video items."""
type VideoPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Video items."""
  data: [Video!]!
}
